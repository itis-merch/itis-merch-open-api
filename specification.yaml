openapi: 3.0.0
info:
  title: Itis.Merch OpenAPI спецификация
  description: |-
    Данная страница содержит в себе спецификацию OpenAPI RESTful приложения Itis.Merch. Вы можете использовать ее в свободном для создания своих клиентов.
    
    Также эта спецификация используется и нашей командой разработки.
  version: 0.0.1

servers:
  - url: http://localhost:8080/api/v1
    description: Developments server

paths:
  /products:
    get:
      summary: Метод получения продуктов всех категорий.
      description: |-
        Возвращает массив всех продуктов независимо от принадлежности к конкретной категории.
      tags:
        - Products
      operationId: getProductsFromAllCategories
      responses:
        '200':
          description: Успешный ответ со списком продуктов
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Product"
    post:
      summary: Метод создания нового продукта.
      description: |-
        Создает новый продукт.
      tags:
       - Products
      operationId: createProduct
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Product"
      responses:
        '200':
          description: Успешное создание продукта.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
      
  
  /products/{product_id}:
    get:
      summary: Метод получения продукта по идентификатору.
      description: |-
        Возвращает продукт по его идентификатору.
      tags:
        - Products
      operationId: getProductById
      parameters:
        - name: product_id
          in: path
          required: true
          description: Идентификатор продукта
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Успешный ответ с представлением продукта.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
                
    post:
      summary: Метод изменения / обновления существующего продукта.
      description: |-
        Обновляет существующий продукт по его идентификатору, меня некоторые его свойства.
      tags:
       - Products
      operationId: updateProductById
      parameters:
        - name: product_id
          in: path
          required: true
          description: Идентификатор продукта
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Product"
      responses:
        '200':
          description: Успешное обновление продукта.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
  
  /categories:
    get:
      summary: Метод получения всех категорий.
      description: |-
        Возвращает массив всех категорий.
      tags:
        - Categories
      operationId: getCategories
      responses:
        '200':
          description: Успешный ответ со списком категорий.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Category"
    post:
      summary: Метод создания новой категории.
      description: |-
        Создает новую категорию.
      tags:
       - Categories
      operationId: createCategory
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Category"
      responses:
        '200':
          description: Успешное создание категории
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"

  /categories/{category_id}:
    get:
      summary: Метод получения категории по идентификатору.
      description: |-
        Возвращает категории по ее идентификатору.
      tags:
        - Categories
      operationId: getCategoryById
      parameters:
        - name: category_id
          in: path
          required: true
          description: Идентификатор категории
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Успешный ответ с представлением категории.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Category"
                
    post:
      summary: Метод изменения / обновления существующей категории.
      description: |-
        Обновляет существующую категорию по ее идентификатору, меняф некоторые ее свойства.
      tags:
       - Categories
      operationId: updateCategoryById
      parameters:
        - name: category_id
          in: path
          required: true
          description: Идентификатор категории
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Category"
      responses:
        '200':
          description: Успешное обновление категории.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"


components:
  schemas:
    ApiResponse:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          example: 200
        message:
          type: string
          example: "Successfully created a new product."
          
    User:
      type: object
      required:
        - id
        - role
      properties:
        id:
          type: integer
          example: 1
        role:
          type: string
          enum:
            - CLIENT
            - ADMIN
          example: "ADMIN"
  
    Category:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "Свитшоты"
      
    Product:
      type: object
      required:
        - id
        - category_id
        - name
        - price
      properties:
        id:
          type: integer
          example: 1
        category_id:
          type: integer
          example: 1
        name:
          type: string
          example: 'Свитшот "Computer Angel"'
        description:
          type: string
          example: |-
            Свитшот изготовлен из хлопка, что делает одежду дышащей, прочной, хорошо держащей форму и легко очищаемой от загрязнений. В качестве материала используется футер с начесом, который очень теплый, удобный и тактильно приятен для тела. Эта толстовка с принтом подойдет для использования дома, на тренировках, в тренажерном зале, танцах, фитнесе, для офиса или просто в путешествиях. Данное худи можно сочетать практически с любыми вещами, будь то джинсы и кеды, или брюки и ботинки.
        image_url:
          type: string
          example: https://ke-images.servicecdn.ru/c9mj57oknio7ari6gleg/original.jpg
        quantity:
          type: integer
          example: 20
        price:
          type: number
          example: 9990
    
    Option:
      type: object
      required:
        - id
        - name
        - properties
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "Размер"
        properties:
          type: string
          example: |-
            {
              "values": [
                "XL",
                "L",
                "M",
                "S"
              ],
              "selected": "L"
            }
    
    ShoppingCartItem:
      type: object
      required:
        - id
        - product_id
        - option_id
      properties:
        id:
          type: integer
          example: 1
        product_id:
          type: integer
          example: 1
        option_id:
          type: integer
          example: 1
        quantity:
          type: integer
          example: 2
    
    CartOrder:
      type: object
      required:
        - id
        - user_id
        - item_id
        - total_price
        - status
      properties:
        id:
          type: integer
          example: 1
        user_id:
          type: integer
          example: 1
        item_id:
          type: integer
          example: 1
        total_price:
          type: number
          example: 30990
        status:
          type: string
          enum:
            - CART
            - PENDING
            - PAYED
            - CLOSED
          example: "PENDING"


